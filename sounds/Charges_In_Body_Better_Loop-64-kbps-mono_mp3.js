/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,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y4mn/p8zFHnsOuBO1Nc//tRgICSGaJTi5A6ZNpKXgWZqAC2A3/BICTEBJLmDKJJnohQG7jwMwfiN8n5cedn2eKW/6viRY6cx7Oap5nVy9HU0q2djrWW2h7GzpSFRoYX2NQgJbXaj1Pt/91KliyFLzXu86zu/IuaW6iCdpbfwCAQw7SWoNWzZqRJKMtSgdvKSVTL5TFtamlEXUrfjTLD60sxTuJIhm5TRo1FUMy86qh2z//tSxJ4ACoE9Pe2wRIFgJGk1vBRao49i3YQFhjko6OCLfvmv/+pSvT8WOYQffQide5QQAGdlNo4IAAYYkg6YbXJytmhAKZbDzss3j8WhkP6bbnWWrGVXUZ/VpxI8beM1lG+pJEOSGb6Gq69t3Fo24w1Hd5A399rf/0Z9s+POj3Uij6usAADh2Z3yIACbg1EAwfeTh7gAQLYhE24O/G01Fh3c/lKH3EFv1VXn+mVIEZ7md2gldvtMiHQb9q15lYQg1nK5mvoUb9/N/96CEq3aLOj/+1LEpgALATs3rYDqQVOkprWwlWBGYkKqeqoAKqCbcAABIqlLbGFTknIwMAYbURmCp9qsdBahQb6biZelFFB8Ub0puAaSWjVjWYS8jRqnEBjfniaK+Uzh9hZEnM7bNgz37+X/9BMUHVftFzYXo9EzagAG/yXYgkFMRwvuYhen3Vq8mvuQ8MEPwztYBiOvrtui9KqMeb9hiooQS7PIdhJDibdFVlQmJj6M8cTy+mUc1th9We+WCVr/v//yDM6ulsulF+6PmZJLtNUAOySW4AgBof/7UsStgAo5IzfuHKoBSiRm/cKJsCpkJuLZh8g1ehuAFgldRWxJIGz5aj7l/NTX+gqoCxSsZzKoCWXoGFIY2JC33KisZ8oqUqG0Eqt9AN/2v/7yoI/QSMBjxJwdiLKgAABS/pIkTRL0KwCHnIoXQleL1+MMAZ9KjxK8jVZxcydfqJHvsyooj/4//80Kf7SX//+3QRVMQU1FMy45OS4zVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//tSxLkACskjM660qEFbqOa1sp24VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+1LEwAAKLR8vrQitwNSCo3WHpIBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();
const onDecodeSuccess = decodedAudio => {
  wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
  unlock();
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 0, phetAudioContext.sampleRate ) );
  unlock();
};
phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
export default wrappedAudioBuffer;