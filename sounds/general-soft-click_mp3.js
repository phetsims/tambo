/* eslint-disable */
import simLauncher from '../../joist/js/simLauncher.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,//uQxAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAAFAAAGaQCCgoKCgoKCgoKCgoKCgoKCgoKCrq6urq6urq6urq6urq6urq6urq7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozurq6urq6urq6urq6urq6urq6urq//////////////////////////8AAABQTEFNRTMuMTAwBLkAAAAAAAAAABUgJANtQQAB4AAABmnD0GXwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//uwxAAAAuQBFrQAACKGkOS3PbAANgAEH3ghLg+/////////////////wQcAAgeFgKpLLSgAAAAAAYDgGoKCqOBeNE1lSOjYUfpOXZzcwZgPjA4AKNh4doxzBHTAOBEIgMkKwEAYaFo/RiNCjmBACOFgAQEGMROhhzTm8vS3F13HrDCwYKMGEhSQrJZY6i6I7PjAO0dDVTZM9hsOqYw/WpMNtTXM4OnJiTw1Jmkz///5gGiYm/r//////+r+r/UEzrwSDH9TaTgGZ/1KaIUALnAAABhuSRpK2htGvRqO9x3fmhtqdBlONRhaCTzoJQMAKVsaC4HAIGi5SOU8IXBYmRIkTUoxlqRNJZFSKUlkUv1nqoVC5n////////////h9Lf6vEZ4NogS9tE1XAASNMIFQGBAMZp3gucNYNGYqjtCpSl9ShGmqtUj2kHhcjdyP2ammB4lZiX/AAAAEEgpcGQNRTFpSaNQVjoxFvC57VYaARWGMpdWxD0DyylgeXy280xTEVYqog0OjvEvcDBzRgaTMVTCEpX8FIrs6UJetrydTnBaJeFAKivWr97OVq4CoSBB3/////////////7vWMBR4h4eAAABHYDPRpQyBRl1FxnHAQXuLqrhQySubqAU1KxZTGVw0DQmf////////////////9LABbAIOBcoesil////Tf39//6fb///////7d77z/L2crugomPdhUYQSUVRDFIIiYaJDBBWcjuNcJlAMdHrLNUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+1DE0gBLBGMk/dSAIK6HZn2sMJ1VVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//swxO2AxmQ1K+xvAiDnB6V5rDCcVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sgxPqBxuQtK8xhgWD6PGJhMBX7VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EMTWA8AAAf4AAAAgAAA/wAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = simLauncher.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();
const onDecodeSuccess = decodedAudio => {
  wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
  unlock();
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 0, phetAudioContext.sampleRate ) );
  unlock();
};
phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
export default wrappedAudioBuffer;